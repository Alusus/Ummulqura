import "Srl/Console";
import "Srl/Array";
import "Srl/Math";
import "ummulqura_data.alusus";

@merge module Hijri {
    use Srl;

    class Date {
        def year: int;
        def month: int;
        def day: int;
        def monthLen: int;
        
        handler this~init() {}

        handler this~init(year:int, month:int, day:int, monthLen: int) {
            this.year = year;
            this.month = month;
            this.day = day;
            this.monthLen = monthLen;
        }

        handler this~init(that:ref[Date]) {
            this.year = that.year;
            this.month = that.month;
            this.day = that.day;
            this.monthLen = that.monthLen;
        }

        handler this = (that:ref[Date]) {
            this.year = that.year;
            this.month = that.month;
            this.day = that.day;
            this.monthLen = that.monthLen;
        }
    }

    func convertToHijri(year:int, month:int, day:int): Date {
        def m: int = month;
        def y: int = year;
     
        if month < 3 {
            y -= 1;
            m += 12;
        }
        def a: int = y / 100;
        def jgc: int = a - (a / 4) - 2;
        // compute Chronological Julian Day Number (CJDN)
        def cjdn: int = (365.25 * (y + 4716))~cast[int] + (30.6001 * (m + 1))~cast[int] + day - jgc - 1524;
        a = (cjdn - 1867216.25) / 36524.25;
        // compute Modified Chronological Julian Day Number (MCJDN)
        def mcjdn: int = cjdn - 2400000;
        // the MCJDN's of the start of the lunations in the Umm al-Qura calendar are stored in 'islamcalendar_dat.js'
        def index: int = getDataIndex(mcjdn)
        // compute and output the Umm al-Qura calendar date
        def iln: int = index + 16260;
        def ii: int = (iln - 1) / 12;
        def iy: int = ii + 1;
        def im: int = iln - 12 * ii;
        def id: int = mcjdn - ummulquraData(index - 1) + 1;
        def ml: int = ummulquraData(index) - ummulquraData(index - 1);
        return Date(iy, im, id, ml);
    }

    func convertToGregorian(year:int, month:int, day:int): Date {
        def iyear: int = year;
        def imonth: int = month;
        def iday: int = day;
        def ii: int = iyear - 1;
        def iindex: int = (ii * 12) + 1 + (imonth -1);
        def i: int = iindex - 16260;
        def mcjdn: int = iday + ummulquraData(i - 1) - 1;
        def cjdn: int = mcjdn + 2400000;

        return convertJulianToGregorian(cjdn);
    }

    func convertJulianToGregorian(julianDate:int): Date {
        def z: int = julianDate + 0.5;
        def a: int = (z - 1867216.25) / 36524.25;
        a = z + 1 + a - (a / 4)~cast[int];
        def b: int = a + 1524
        def c: int = (b - 122.1) / 365.25;
        def d: int = 365.25 * c;
        def e: int = (b - d) / 30.6001;
        def day: int = b - d - (e * 30.6001)~cast[int];

        def month: int;
        if e > 13.5 month = e - 13
        else month = e - 1;

        def year: int;
        if month > 2.5 year = c - 4716
        else year = c - 4715;

        if year <= 0 year -= 1;

        return Date(year, month, day, 0);       
    }
}

